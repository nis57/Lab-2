
import java.util.*;
import java.awt.*;
import java.awt.geom.*;

public class MyPoly extends Polygon
{
     // This ArrayList is how we will "display" the points in the MyPoly.  The idea is
     // that a circle will be created for every (x,y) point in the MyPoly.  To give you
     // a good start on this, I have implemented the constructors below.

     private ArrayList<Ellipse2D.Double> thePoints;
     private Color myColor;
     private boolean highlighted;
     private boolean inBounds; 
     private int highlight = -1;


     // Constructors.  These should work with Assig5.java but you may want to modify
     // them for Assig5B.java.
    MyPoly()
    {
            super();
            myColor = Color.BLACK;
            thePoints = new ArrayList<Ellipse2D.Double>();
    }
    // This constructor should be a lot of help to see the overall structure of the
    // MyPoly class and how both the inherited Polygon functionality as well as the
    // additional functionality are incorporated.  Note that the first thing done is
    // a call to super to set up the points in the "regular" Polygon.  Then the color
    // is set and the point circles are created to correspond with each point in the
    // Polygon.
    MyPoly(int [] xpts, int [] ypts, int npts, Color col)
    {
        super(xpts, ypts, npts);
        myColor = col;
        thePoints = new ArrayList<Ellipse2D.Double>();
        for (int i = 0; i < npts; i++)
        {
                int x = xpts[i];
                int y = ypts[i];
                addTheLittlePoints(x, y);
        }    
    }

    // The setFrameFromCenter() method in Ellipse2D.Double allows the circles to be
    // centered on the points in the MyPoly
    public void addTheLittlePoints(int x, int y) 
    {
            Ellipse2D.Double temp = new Ellipse2D.Double(x, y, 8, 8);
            temp.setFrameFromCenter(x, y, x+4, y+4);
            thePoints.add(temp);
    }//adds circles to the ends of the polgyons when editing the shape

    public void translate(int x, int y)
    {

    // You must override this method to add a new point to the end of the
	// MyPoly.  The Polygon version works fine for the "regular" part of the
	// MyPoly but you must add the functionality to add the circle for the
	// point.	
        thePoints.clear();
        for (int i = 0; i<xpoints.length;i++)
        {
            xpoints[i]= xpoints[i]+x;
            ypoints[i]= ypoints[i]+y;
            addTheLittlePoints(xpoints[i],ypoints[i]);
        }
               
    } //end of translate

// This method is so simple I just figured I would give it to you. 	   
    public void setHighlight(boolean b)
    {
            highlighted = b;	
    }

 public void glowingCircles(int x, int y)
    {
        for (int i = 0; i< thePoints.size();i++)
        {
            inBounds = thePoints.get(i).contains(x,y);
            if(inBounds)
            {
                highlight = i;
                break;
            }
        }
    }

    
    public void addPoint(int x, int y)
    {
        // You must override this method to add a new point to the end of the
        // MyPoly.  The Polygon version works fine for the "regular" part of the
        // MyPoly but you must add the functionality to add the circle for the
        // point.	
        
        if(npoints >= xpoints.length)
        {
            int doubledLength = npoints*2;
            xpoints = Arrays.copyOf(xpoints, doubledLength);
            ypoints = Arrays.copyOf(ypoints, doubledLength);
        }
        xpoints[npoints] = x;
        ypoints[npoints] = y;
        this.addTheLittlePoints(x,y);
        
        npoints ++;
    }

    public MyPoly insertPoint(int x, int y)
    {
        // Implement this method to return a new MyPoly containing new point (x,y)
        // inserted between the two points in the MyPoly that it is "closest" to.  See
        // the getClosest() method below for help with this.
        
        int minInd = getClosest(x,y);
        
        // xpoints = Arrays.copyOf(xpoints, npoints+1);
        // ypoints = Arrays.copyOf(ypoints, npoints+1);

        int []tempXp = new int[npoints+1];
        int []tempYp = new int[npoints+1];

        for(int i = 0; i < npoints - 1; i++)
        {
            tempXp[i] = xpoints[i];
        }//copies x array into an array thats one bigger
        for(int i = 0; i < npoints - 1; i++)
        {
            tempYp[i] = ypoints[i];
        }//copies y array into an array thats one bigger

        xpoints = tempXp;
        ypoints = tempYp;

        for (int i = npoints - 1; i > minInd; i--)
        {
            xpoints[i+1]= xpoints[i];
            ypoints[i+1]= ypoints[i];
        }
        
        xpoints[minInd+1]=x;
        ypoints[minInd+1]=y;
        npoints ++;
        
        MyPoly m = new MyPoly(xpoints,ypoints,npoints,myColor);
        m.setHighlight(true);
        return m;
        
    }//end insert point

    // This method will return the index of the first point of the line segment that is
    // closest to the argument (x, y) point.  It uses some methods in the Line2D.Double
    // class and will be very useful when adding a point to the MyPoly.  Read through it
    // and see if you can figure out exactly what it is doing.
    public int getClosest(int x, int y)
    {
            if (npoints == 1)
                    return 0;
            else
            {
                    Line2D currSeg = new Line2D.Double(xpoints[0], ypoints[0], xpoints[1], ypoints[1]);
                    double currDist = currSeg.ptSegDist(x, y);
                    double minDist = currDist;
                    int minInd = 0;
                    for (int ind = 1; ind < npoints; ind++)
                    {
                            currSeg = new Line2D.Double(xpoints[ind], ypoints[ind],
                                                            xpoints[(ind+1)%npoints], ypoints[(ind+1)%npoints]);
                            currDist = currSeg.ptSegDist(x, y);
                            if (currDist < minDist)
                            {
                                    minDist = currDist;
                                    minInd = ind;
                            }
                    }
                    return minInd;
            }
    }

    public MyPoly removePoint(int x, int y)
    {
            // Implement this method to return a new MyPoly that is the same as the
            // original but without the "point" containing (x, y).  Note that in this
            // case (x, y) is not an actual point in the MyPoly but rather a location
            // on the screen that was clicked on my the user.  If this point falls within
            // any of the point circles in the MyPoly then the point in the MyPoly that
            // the circle represents should be removed.  If the resulting MyPoly has no
            // points (i.e. the last point has been removed) then this method should return
            // null.  If (x,y) is not within any point circles in the MyPoly then the
            // original, unchanged MyPoly should be returned.
        boolean inbounds = false;
        int index = 0;
        
        for (index = 0; index<thePoints.size(); index++)
        {
            if (thePoints.get(index).contains(x, y))
            {
                inbounds = true;
                break;
            }
            else
            {
                inbounds = false;
            }
        }
        
        if(inbounds)
        {
            int minIndex = index;
            for (int j = minIndex+1; j<npoints; j++)
            {
                xpoints[j-1]= xpoints[j];
                ypoints[j-1]= ypoints[j];
            }

            xpoints = Arrays.copyOf(xpoints, npoints-1);
            ypoints = Arrays.copyOf(ypoints, npoints-1);
            npoints --;
            if (npoints == 0)
            {
                return null;
            }
            else
            {
            MyPoly m = new MyPoly(xpoints, ypoints, npoints, myColor);
            m.setHighlight(true);
            return m;
            
            }
            
        }
        else 
        {
            return this;
        }    
    }

    public boolean contains(int x, int y)
    {
            // Override this method. The Polygon contains() method works fine as long as
            // the Polygon has 3 or more points.  You will override the method so that if
            // a MyPoly has only 2 points or 1 point it will still work.  Think about how
            // you can do this
        boolean inbounds = false; 

        
        if (npoints>2)
        {
            inbounds = super.contains(x,y);
        }
        else if (npoints == 2)
        {

            
            Line2D segment = new Line2D.Double(xpoints[0], ypoints[0], xpoints[1], ypoints[1]);
            double currDist = segment.ptSegDist(x, y);
            
            if(currDist>8)
            {
                inbounds = false;
            }
            else
            inbounds = true;
            
            
        }
        else if (npoints ==1)
        {
            for (int index = 0; index<thePoints.size(); index++)
            {
                if (thePoints.get(index).contains(x, y))
                {
                    inbounds = true;
                    break;
                }
                else
                {
                    inbounds = false;
                    break;
                }
            }
        }
        
        return inbounds;
        
    }

    
    public void draw(Graphics2D grizzlybears)
    {
            // Implement this method to draw the MyPoly onto the Graphics2D argument g.
            // See MyRectangle2D.java for a simple example of doing this.  In the case of
            // this MyPoly class the method is more complex, since you must handle the
            // special cases of 1 point (draw only the point circle), 2 points (drow the
            // line) and the case where the MyPoly is selected.  You must also use the
            // color of the MyPoly in this method.

           Ellipse2D.Double temp;
            if(highlighted)
            {
                grizzlybears.setColor(myColor);
                grizzlybears.draw(this);
                for(int i = 0; i < npoints ; i++)
                {
                    temp = thePoints.get(i);
                    grizzlybears.draw(temp);
                }
                if(inBounds && highlight!= -1)
                {
                    grizzlybears.setColor(myColor);
                    grizzlybears.fill(thePoints.get(highlight));
                }
            }
            else 
            {
                if(thePoints.size() > 2)
                {
                    grizzlybears.setColor(myColor);
                    grizzlybears.draw(this);

                    grizzlybears.fill(this);
                }
                else if(thePoints.size() == 2)
                {
                    for(int i = 0; i < 2; i++)
                    {
                        temp = thePoints.get(i);
                        grizzlybears.draw(temp);
                    }
                    grizzlybears.drawLine(xpoints[0],ypoints[0],xpoints[0],ypoints[0]);                 
                }
                else if(thePoints.size() == 1)
                {
                    temp = thePoints.get(0);
                    grizzlybears.draw(temp);
                }
            }
   
            
    }
    
    public String fileData()
    {
            // Implement this method to return a String representation of this MyPoly
            // so that it can be saved into a text file.  This should produce a single
            // line that is formatted in the following way:
            // x1,y1:x2,y2:x3,y3: ... : |r,g,b
            // Where the points and the r,g,b values are separated by a vertical bar.
            // For two examples, see A5snap.htm and A5Bsnap.htm.
            // Look at the Color class to see how to get the r,g,b values.
        String polyLine = ""; 
        String tempPolyLine = "";
 
        
        for (int i = 0; i<npoints;i++)
        {
            String xvalue = Integer.toString(xpoints[i]);
            String yvalue = Integer.toString(ypoints[i]);
      
            
            if(i<npoints-1)
            {
                tempPolyLine = xvalue+","+yvalue+":";
            }
            else
            {
                tempPolyLine = xvalue+","+yvalue+"|";
            }
            
            polyLine = polyLine + tempPolyLine;
            
        }
        
        polyLine += Integer.toString(myColor.getRed())+","+ Integer.toString(myColor.getGreen())+","+Integer.toString(myColor.getBlue());
        return polyLine;

    }

    // These methods are also so simple that I have implemented them.
    public void setColor(Color newColor)
    {
            myColor = newColor;
    }	

    public Color getColor()
    {
            return myColor;
    }		
    
}
